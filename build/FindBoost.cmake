

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS})
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated FindBoost.cmake")
# Global approach
set(Boost_FOUND 1)
set(Boost_VERSION "1.72.0")

find_package_handle_standard_args(Boost REQUIRED_VARS
                                  Boost_VERSION VERSION_VAR Boost_VERSION)
mark_as_advanced(Boost_FOUND Boost_VERSION)


set(Boost_INCLUDE_DIRS "/home/zhanglei/.conan/data/boost/1.72.0/_/_/package/84aa75c7e2b2b3d1cb01af39298d01342cf8d782/include")
set(Boost_INCLUDE_DIR "/home/zhanglei/.conan/data/boost/1.72.0/_/_/package/84aa75c7e2b2b3d1cb01af39298d01342cf8d782/include")
set(Boost_INCLUDES "/home/zhanglei/.conan/data/boost/1.72.0/_/_/package/84aa75c7e2b2b3d1cb01af39298d01342cf8d782/include")
set(Boost_RES_DIRS )
set(Boost_DEFINITIONS "-D_GLIBCXX_USE_CXX11_ABI=1")
set(Boost_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(Boost_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1")
set(Boost_COMPILE_OPTIONS_LIST "" "")
set(Boost_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(Boost_LIBRARIES "") # Will be filled later
set(Boost_LIBS "") # Same as Boost_LIBRARIES
set(Boost_SYSTEM_LIBS rt pthread)
set(Boost_FRAMEWORK_DIRS )
set(Boost_FRAMEWORKS )
set(Boost_FRAMEWORKS_FOUND "") # Will be filled later
set(Boost_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(Boost_FRAMEWORKS_FOUND "${Boost_FRAMEWORKS}" "${Boost_FRAMEWORK_DIRS}")

mark_as_advanced(Boost_INCLUDE_DIRS
                 Boost_INCLUDE_DIR
                 Boost_INCLUDES
                 Boost_DEFINITIONS
                 Boost_LINKER_FLAGS_LIST
                 Boost_COMPILE_DEFINITIONS
                 Boost_COMPILE_OPTIONS_LIST
                 Boost_LIBRARIES
                 Boost_LIBS
                 Boost_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to Boost_LIBS and Boost_LIBRARY_LIST
set(Boost_LIBRARY_LIST boost_wave boost_container boost_contract boost_exception boost_graph boost_iostreams boost_locale boost_log boost_program_options boost_random boost_regex boost_serialization boost_wserialization boost_coroutine boost_fiber boost_context boost_timer boost_thread boost_chrono boost_date_time boost_atomic boost_filesystem boost_system boost_type_erasure boost_log_setup boost_math_c99 boost_math_c99f boost_math_c99l boost_math_tr1 boost_math_tr1f boost_math_tr1l boost_stacktrace_addr2line boost_stacktrace_backtrace boost_stacktrace_basic boost_stacktrace_noop boost_unit_test_framework)
set(Boost_LIB_DIRS "/home/zhanglei/.conan/data/boost/1.72.0/_/_/package/84aa75c7e2b2b3d1cb01af39298d01342cf8d782/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_Boost_DEPENDENCIES "${Boost_FRAMEWORKS_FOUND} ${Boost_SYSTEM_LIBS} ZLIB::ZLIB;BZip2::BZip2")

conan_package_library_targets("${Boost_LIBRARY_LIST}"  # libraries
                              "${Boost_LIB_DIRS}"      # package_libdir
                              "${_Boost_DEPENDENCIES}"  # deps
                              Boost_LIBRARIES            # out_libraries
                              Boost_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "Boost")                                      # package_name

set(Boost_LIBS ${Boost_LIBRARIES})

foreach(_FRAMEWORK ${Boost_FRAMEWORKS_FOUND})
    list(APPEND Boost_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND Boost_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${Boost_SYSTEM_LIBS})
    list(APPEND Boost_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND Boost_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(Boost_LIBRARIES_TARGETS "${Boost_LIBRARIES_TARGETS};ZLIB::ZLIB;BZip2::BZip2")
set(Boost_LIBRARIES "${Boost_LIBRARIES};ZLIB::ZLIB;BZip2::BZip2")

set(CMAKE_MODULE_PATH "/home/zhanglei/.conan/data/boost/1.72.0/_/_/package/84aa75c7e2b2b3d1cb01af39298d01342cf8d782/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/zhanglei/.conan/data/boost/1.72.0/_/_/package/84aa75c7e2b2b3d1cb01af39298d01342cf8d782/" ${CMAKE_PREFIX_PATH})

foreach(_BUILD_MODULE_PATH ${Boost_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET Boost::Boost)
        add_library(Boost::Boost INTERFACE IMPORTED)
        if(Boost_INCLUDE_DIRS)
            set_target_properties(Boost::Boost PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                  "${Boost_INCLUDE_DIRS}")
        endif()
        set_property(TARGET Boost::Boost PROPERTY INTERFACE_LINK_LIBRARIES
                     "${Boost_LIBRARIES_TARGETS};${Boost_LINKER_FLAGS_LIST}")
        set_property(TARGET Boost::Boost PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     ${Boost_COMPILE_DEFINITIONS})
        set_property(TARGET Boost::Boost PROPERTY INTERFACE_COMPILE_OPTIONS
                     "${Boost_COMPILE_OPTIONS_LIST}")
        
        # Library dependencies
        include(CMakeFindDependencyMacro)

        if(NOT ZLIB_FOUND)
            find_dependency(ZLIB REQUIRED)
        else()
            message(STATUS "Dependency ZLIB already found")
        endif()


        if(NOT BZip2_FOUND)
            find_dependency(BZip2 REQUIRED)
        else()
            message(STATUS "Dependency BZip2 already found")
        endif()

    endif()
endif()
